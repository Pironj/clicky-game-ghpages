{"version":3,"sources":["Components/Wrapper/index.js","Components/Nav/index.js","Components/Header/Jumbotron.js","Components/Images/Image.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Nav","href","score","highScore","Header","Images","onClick","beenClicked","id","alt","name","src","image","App","state","GameData","clickedId","console","log","correctGuess","newGameData","_this","map","item","newItem","Object","assign","clicked","continueGame","endGame","gameData","alert","newShuffledGameData","shuffle","setState","_this$state","newScore","newHighScore","Math","max","i","length","j","floor","random","_ref","_this2","this","Components_Wrapper","Components_Nav","Jumbotron","card","Image","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2oEAOeA,eAJC,SAAAC,GACd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,YCU1BC,SAXH,SAAAN,GACV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAjC,eACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,UACUJ,EAAMQ,MADhB,eACmCR,EAAMS,cCMhCC,SAXD,WACZ,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,sBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,yGCMOO,SAVA,SAAAX,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOQ,QAAS,kBAAMZ,EAAMa,YAAYb,EAAMc,MAC3Db,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKY,IAAKf,EAAMgB,KAAMC,IAAKjB,EAAMkB,mBC0G1BC,6MAvGbC,MAAQ,CACNC,WACAb,MAAO,EACPC,UAAW,KAObI,YAAc,SAACS,GACbC,QAAQC,IAAI,WAAYF,GAExB,IAAIG,GAAe,EACbC,EAAcC,EAAKP,MAAMC,SAASO,IAAI,SAAAC,GAC1C,IAAMC,EAAUC,OAAOC,OAAO,GAAIH,GASlC,OARIC,EAAQhB,KAAOQ,IAGZQ,EAAQG,UACXR,GAAe,EACfK,EAAQG,SAAU,IAGfH,IAKLL,EACFE,EAAKO,aAAaR,IAElBH,QAAQC,IAAI,mBACZG,EAAKQ,QAAQT,OAOjBS,QAAU,SAACC,GACTC,MAAM,uDAEN,IACMC,EAAsBF,EAC5BT,EAAKY,QAAQD,GACbX,EAAKa,SAAS,CACZnB,SAAUiB,EACV9B,MALa,OAWjB0B,aAAe,SAACE,GAAa,IAAAK,EAEEd,EAAKP,MAA1BZ,EAFmBiC,EAEnBjC,MAAOC,EAFYgC,EAEZhC,UAETiC,EAAWlC,EAAQ,EACnBmC,EAAeC,KAAKC,IAAIH,EAAUjC,GAClC6B,EAAsBF,EAC5BT,EAAKY,QAAQD,GAEbX,EAAKa,SAAS,CACZnB,SAAUiB,EACV9B,MAAOkC,EACPjC,UAAWkC,OAMfJ,QAAU,SAAAD,GACR,IAAK,IAAIQ,EAAIR,EAAoBS,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvD,IAAIE,EAAIJ,KAAKK,MAAML,KAAKM,UAAYJ,EAAI,IADeK,EAEJ,CAACb,EAAoBU,GAAIV,EAAoBQ,IAA/FR,EAAoBQ,GAFkCK,EAAA,GAE9Bb,EAAoBU,GAFUG,EAAA,6EAOlD,IAAAC,EAAAC,KACP,OACEpD,EAAAC,EAAAC,cAACmD,EAAD,KACErD,EAAAC,EAAAC,cAACoD,EAAD,CACE/C,MAAO6C,KAAKjC,MAAMZ,MAAOC,UAAW4C,KAAKjC,MAAMX,YAEjDR,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdiD,KAAKjC,MAAMC,SAASO,IAAI,SAAA6B,GAAI,OAC3BxD,EAAAC,EAAAC,cAACuD,EAAD,CACE5C,GAAI2C,EAAK3C,GACT6C,IAAKF,EAAK3C,GACVI,MAAOuC,EAAKvC,MACZL,YAAauC,EAAKvC,yBA/FZ+C,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9cc41a8d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Nav = props => {\n  return (\n    <div className=\"navbar navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">Memory Game</a>\n      <div className=\"score\">\n        Score: {props.score} Highscore: {props.highScore}\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nconst Header= () => {\n  return (\n    <nav className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container headerText\">\n        <h1 className=\"display-4\">Clicky Memory Game</h1>\n        <p className=\"lead\">Click on the images below to earn points. If you click on the same image twice the game will end.</p>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nconst Images = props => {\n  return (\n    <div className=\"card\" onClick={() => props.beenClicked(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default Images;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Wrapper from './Components/Wrapper';\nimport Nav from './Components/Nav';\nimport Header from './Components/Header/Jumbotron';\nimport Images from './Components/Images/Image';\nimport GameData from './GameData.json';\n\nclass App extends Component {\n\n  state = {\n    GameData,\n    score: 0,\n    highScore: 0\n  };\n  \n  // toggle clicked from false -> true\n  // randomly re-sort array - shuffle function\n  // check end/continue logic - increment score\n    // if not - call end game function to reset state for gamedata and score\n  beenClicked = (clickedId) => {\n    console.log('id here!', clickedId);\n    // if card is clicked update clicked state from false to true\n    let correctGuess = false\n    const newGameData = this.state.GameData.map(item => {\n      const newItem = Object.assign({}, item); // { ...item }\n      if (newItem.id === clickedId) {\n        // checking to see if item.clicked is already true/false -> if false, we toggle correctGuess and set it to be true on item.clicked\n        // if the item clicked state was false -> set correct guess to be true\n        if (!newItem.clicked) {\n          correctGuess = true;\n          newItem.clicked = true;\n        }\n      }\n      return newItem;\n    });\n    // decide if it's end of game/continuing\n      // true -> continue\n      // false -> end game\n    if (correctGuess) {\n      this.continueGame(newGameData);\n    } else {\n      console.log(\"already clicked\");\n      this.endGame(newGameData);\n    }\n  }\n\n  // end game function\n  // alert the user - like game over\n  // reset their current score to 0 and gamedata to be reset/make all clicked properties to be false\n  endGame = (gameData) => {\n    alert(\"Woops you already clicked that character. Game Over\");\n    // let correctGuess = \n    let newScore = 0;\n    const newShuffledGameData = gameData;\n    this.shuffle(newShuffledGameData);\n    this.setState({\n      GameData: newShuffledGameData,\n      score: newScore\n    });\n  }\n  \n  // continue game function\n  // increment scores for score and high score?\n  continueGame = (gameData) => {\n    // increment score & check if new high score needs to change\n    const { score, highScore } = this.state;\n    // max new score and high score\n    const newScore = score + 1;\n    const newHighScore = Math.max(newScore, highScore);\n    const newShuffledGameData = gameData;\n    this.shuffle(newShuffledGameData);\n    \n    this.setState({\n      GameData: newShuffledGameData, // should shuffle\n      score: newScore,\n      highScore: newHighScore\n    });\n  }\n  \n  // shuffle function - randomizing array elements\n  // to be called in both end/continue functions\n  shuffle = newShuffledGameData => {\n    for (let i = newShuffledGameData.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [newShuffledGameData[i], newShuffledGameData[j]] = [newShuffledGameData[j], newShuffledGameData[i]];\n    }\n  }\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav \n          score={this.state.score} highScore={this.state.highScore}\n        />\n        <Header />\n        <div className=\"gameArea\">\n        {this.state.GameData.map(card => (\n          <Images \n            id={card.id}\n            key={card.id}\n            image={card.image}\n            beenClicked={this.beenClicked}\n          />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}